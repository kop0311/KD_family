version: '3.8'

services:
  # 前端应用
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
    container_name: kd-family-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_WS_URL=ws://backend:8000
    depends_on:
      - backend
      - redis
    networks:
      - kd-family-network
    volumes:
      - frontend-logs:/app/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`kdfamily.local`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  # 后端API
  backend:
    image: kd-family-backend:latest
    container_name: kd-family-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-kd_family}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=http://frontend:3000
    depends_on:
      - postgres
      - redis
    networks:
      - kd-family-network
    volumes:
      - backend-logs:/app/logs
      - backend-uploads:/app/uploads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.kdfamily.local`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: kd-family-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=kd_family
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - kd-family-network
    ports:
      - "5432:5432"

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: kd-family-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - kd-family-network
    ports:
      - "6379:6379"

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: kd-family-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - kd-family-network

  # Caddy 服务器（替代方案）
  caddy:
    image: caddy:alpine
    container_name: kd-family-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
    depends_on:
      - frontend
      - backend
    networks:
      - kd-family-network
    profiles:
      - caddy

  # 监控 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: kd-family-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - kd-family-network
    profiles:
      - monitoring

  # 监控 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: kd-family-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - kd-family-network
    profiles:
      - monitoring

  # 日志聚合 - Loki
  loki:
    image: grafana/loki:latest
    container_name: kd-family-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - kd-family-network
    profiles:
      - monitoring

  # 日志收集 - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: kd-family-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - frontend-logs:/var/log/frontend:ro
      - backend-logs:/var/log/backend:ro
      - nginx-logs:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - kd-family-network
    profiles:
      - monitoring

  # 备份服务
  backup:
    image: postgres:15-alpine
    container_name: kd-family-backup
    restart: "no"
    environment:
      - PGPASSWORD=password
    volumes:
      - ./backups:/backups
      - backup-scripts:/scripts
    command: |
      sh -c "
        while true; do
          pg_dump -h postgres -U postgres -d kd_family > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name '*.sql' -mtime +7 -delete
          sleep 86400
        done
      "
    depends_on:
      - postgres
    networks:
      - kd-family-network
    profiles:
      - backup

networks:
  kd-family-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  frontend-logs:
  backend-logs:
  backend-uploads:
  nginx-logs:
  caddy-data:
  caddy-config:
  prometheus-data:
  grafana-data:
  loki-data:
  backup-scripts:
