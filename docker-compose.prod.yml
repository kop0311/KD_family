version: '3.8'

services:
  # Production Caddy proxy
  caddy:
    image: caddy:2-alpine
    container_name: kdfamily_caddy_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
      - static_files:/var/www/kdfamily:ro
    environment:
      - DOMAIN=${DOMAIN:-kdfamily.example.com}
      - CADDY_EMAIL=${CADDY_EMAIL:-admin@kdfamily.example.com}
      - BACKEND_HOST=app
      - BACKEND_PORT=3000
      - FRONTEND_ROOT=/var/www/kdfamily
    networks:
      - kdfamily_network
    restart: unless-stopped
    depends_on:
      - app
      - mysql

  # Production MySQL database
  mysql:
    image: mysql:8.0
    container_name: kdfamily_mysql_prod
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./schema:/docker-entrypoint-initdb.d
    networks:
      - kdfamily_network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: kdfamily_redis_prod
    volumes:
      - redis_data:/data
    networks:
      - kdfamily_network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # Production application (Next.js + Backend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: kdfamily_app_prod
    environment:
      NODE_ENV: production
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
      HOSTNAME: "0.0.0.0"
    volumes:
      - uploads_data:/app/uploads
      - static_files:/app/.next/static
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kdfamily_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backup service
  backup:
    image: mysql:8.0
    container_name: kdfamily_backup
    environment:
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - backup_data:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - kdfamily_network
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    command: sh -c "chmod +x /backup.sh && crond -f"
    profiles:
      - backup

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: kdfamily_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - kdfamily_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: kdfamily_grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - kdfamily_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  mysql_data:
  redis_data:
  uploads_data:
  static_files:
  backup_data:
  caddy_data:
  caddy_config:
  caddy_logs:
  prometheus_data:
  grafana_data:

networks:
  kdfamily_network:
    driver: bridge
