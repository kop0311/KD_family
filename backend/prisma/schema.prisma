// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique @db.VarChar(30)
  email       String   @unique @db.VarChar(255)
  password    String   @db.VarChar(255)
  fullName    String   @map("full_name") @db.VarChar(100)
  role        UserRole @default(MEMBER)
  avatarUrl   String?  @map("avatar_url") @db.VarChar(500)
  groupId     Int?     @map("group_id")
  isActive    Boolean  @default(true) @map("is_active")
  lastLogin   DateTime? @map("last_login")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  group               Group?              @relation(fields: [groupId], references: [id])
  createdTasks        Task[]              @relation("TaskCreator")
  assignedTasks       Task[]              @relation("TaskAssignee")
  approvedTasks       Task[]              @relation("TaskApprover")
  points              Point[]
  achievements        UserAchievement[]
  notifications       Notification[]
  createdAchievements Achievement[]       @relation("AchievementCreator")
  taskComments        TaskComment[]
  taskAttachments     TaskAttachment[]

  @@map("users")
}

enum UserRole {
  ADVISOR
  PARENT
  MEMBER

  @@map("user_role")
}

// Group model for family groups
model Group {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  inviteCode  String   @unique @map("invite_code") @db.VarChar(20)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  users User[]
  tasks Task[]

  @@map("groups")
}

// Task model
model Task {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(200)
  description String?      @db.Text
  points      Int          @default(0)
  category    String       @db.VarChar(50)
  status      TaskStatus   @default(AVAILABLE)
  priority    TaskPriority @default(MEDIUM)
  createdBy   Int          @map("created_by")
  assignedTo  Int?         @map("assigned_to")
  approvedBy  Int?         @map("approved_by")
  groupId     Int?         @map("group_id")
  dueDate     DateTime?    @map("due_date")
  completedAt DateTime?    @map("completed_at")
  approvedAt  DateTime?    @map("approved_at")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  creator     User              @relation("TaskCreator", fields: [createdBy], references: [id])
  assignee    User?             @relation("TaskAssignee", fields: [assignedTo], references: [id])
  approver    User?             @relation("TaskApprover", fields: [approvedBy], references: [id])
  group       Group?            @relation(fields: [groupId], references: [id])
  comments    TaskComment[]
  attachments TaskAttachment[]

  @@map("tasks")
}

enum TaskStatus {
  AVAILABLE
  CLAIMED
  COMPLETED
  APPROVED
  REJECTED

  @@map("task_status")
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@map("task_priority")
}

// Task comments
model TaskComment {
  id        Int      @id @default(autoincrement())
  taskId    Int      @map("task_id")
  userId    Int      @map("user_id")
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("task_comments")
}

// Task attachments
model TaskAttachment {
  id           Int      @id @default(autoincrement())
  taskId       Int      @map("task_id")
  userId       Int      @map("user_id")
  filename     String   @db.VarChar(255)
  originalName String   @map("original_name") @db.VarChar(255)
  mimeType     String   @map("mime_type") @db.VarChar(100)
  size         Int
  url          String   @db.VarChar(500)
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("task_attachments")
}

// Points tracking
model Point {
  id          Int         @id @default(autoincrement())
  userId      Int         @map("user_id")
  taskId      Int?        @map("task_id")
  points      Int
  type        PointType
  description String?     @db.VarChar(255)
  metadata    Json?
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("points")
}

enum PointType {
  TASK_COMPLETION
  BONUS
  PENALTY
  ACHIEVEMENT
  MANUAL

  @@map("point_type")
}

// Achievement system
model Achievement {
  id              Int               @id @default(autoincrement())
  title           String            @db.VarChar(100)
  description     String            @db.Text
  icon            String?           @db.VarChar(100)
  imageUrl        String?           @map("image_url") @db.VarChar(500)
  pointsRequired  Int?              @map("points_required")
  tasksRequired   Int?              @map("tasks_required")
  streakRequired  Int?              @map("streak_required")
  category        String            @db.VarChar(50)
  isActive        Boolean           @default(true) @map("is_active")
  createdBy       Int               @map("created_by")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  // Relations
  creator         User              @relation("AchievementCreator", fields: [createdBy], references: [id])
  userAchievements UserAchievement[]

  @@map("achievements")
}

// User achievements
model UserAchievement {
  id            Int         @id @default(autoincrement())
  userId        Int         @map("user_id")
  achievementId Int         @map("achievement_id")
  earnedAt      DateTime    @default(now()) @map("earned_at")

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Notification system
model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int              @map("user_id")
  title     String           @db.VarChar(200)
  message   String           @db.Text
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  actionUrl String?          @map("action_url") @db.VarChar(500)
  metadata  Json?
  createdAt DateTime         @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  TASK
  ACHIEVEMENT

  @@map("notification_type")
}

// User statistics (materialized view or computed)
model UserStats {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique @map("user_id")
  totalPoints    Int      @default(0) @map("total_points")
  weekPoints     Int      @default(0) @map("week_points")
  monthPoints    Int      @default(0) @map("month_points")
  yearPoints     Int      @default(0) @map("year_points")
  totalTasks     Int      @default(0) @map("total_tasks")
  completedTasks Int      @default(0) @map("completed_tasks")
  currentStreak  Int      @default(0) @map("current_streak")
  bestStreak     Int      @default(0) @map("best_streak")
  rank           Int      @default(0)
  lastActivity   DateTime? @map("last_activity")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("user_stats")
}

// System settings
model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique @db.VarChar(100)
  value     String   @db.Text
  type      String   @db.VarChar(20) // 'string', 'number', 'boolean', 'json'
  category  String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("settings")
}
